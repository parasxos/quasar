
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

    The stub of this file was generated by quasar (https://github.com/quasar-team/quasar/)

    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.


 */


#include <Configuration.hxx> // TODO; should go away, is already in Base class for ages

#include <DLogLevel.h>
#include <ASLogLevel.h>


namespace Device
{
// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111






// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DLogLevel::DLogLevel (
    const Configuration::LogLevel& config,
    Parent_DLogLevel* parent
):
    Base_DLogLevel( config, parent)

    /* fill up constructor initialization list here */
    ,m_componentName(config.name())
{
    /* fill up constructor body here */
    LOG(Log::DBG) << __FUNCTION__ << " created DLogLevel device instance ["<<m_componentName<<"]";
}

/* sample dtr */
DLogLevel::~DLogLevel ()
{
}

/* delegates for cachevariables */

/* Note: never directly call this function. */

UaStatus DLogLevel::writeLogLevel ( const UaString& v)
{
    const std::string level(v.toUtf8());
    Log::LOG_LEVEL logLevel;
    if(!Log::logLevelFromString(level, logLevel))
    {
        LOG(Log::WRN) << __FUNCTION__ << " failed to set logging component [name: "<<m_componentName<<"] to level ["<<level<<"]: Level not recognised";
        return OpcUa_BadInvalidArgument;
    }

    if(m_componentName == "GeneralLogLevel")
    {
        Log::setNonComponentLogLevel(logLevel);
        LOG(Log::INF) << __FUNCTION__ << " set logging component [name: "<<m_componentName<<"] to level ["<<level<<"]";
    }
    else
    {
        const Log::LogComponentHandle handle = Log::getComponentHandle(m_componentName);
        if(handle == Log::INVALID_HANDLE)
        {
            LOG(Log::WRN) << __FUNCTION__ << " failed: LogIt has no currently registered logging component named ["<<m_componentName<<"]. Ignoring";
            return OpcUa_BadInvalidArgument;
        }
        if(!Log::setComponentLogLevel(handle, logLevel))
        {
            LOG(Log::WRN) << __FUNCTION__ << " failed to set logging component [name: "<<m_componentName<<", handle: "<<handle<<"] to level ["<<level<<"]: LogIt call failed";
            return OpcUa_BadUnexpectedError;
        }
        LOG(Log::INF) << __FUNCTION__ << " set logging component [name: "<<m_componentName<<", handle: "<<handle<<"] to level ["<<level<<"]";
    }
    
    return OpcUa_Good;
}


/* delegators for methods */

// 3333333333333333333333333333333333333333333333333333333333333333333333333
// 3     FULLY CUSTOM CODE STARTS HERE                                     3
// 3     Below you put bodies for custom methods defined for this class.   3
// 3     You can do whatever you want, but please be decent.               3
// 3333333333333333333333333333333333333333333333333333333333333333333333333

}